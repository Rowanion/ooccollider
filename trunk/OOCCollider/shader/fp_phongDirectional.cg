// data interpolated from vertex program output

float3 lut[3] = {float3(1.0, 0.0, 0.0), float3(0.0, 1.0, 0.0), float3(0.0, 0.0, 1.0)};


struct V2FI
{
  float3 normal   		: TEXCOORD0;
  float3 oColor			: COLOR0;
  float texCoord;
  float4 diffuse		: TEXCOORD1;
  float4 ambient		: TEXCOORD2;
  float3 lightDir		: TEXCOORD3;
  float3 halfVector		: TEXCOORD4;
};

void main(V2FI IN,

	  out float4 color     : COLOR0,
              uniform float3 globalAmbient,
              uniform float3 lightColor,
              uniform float4 lightPosition,
              uniform float4 eyePosition,
              uniform float3 Ke,
              uniform float3 Ka,
              uniform float4 Kd,
              uniform float3 Ks,
              uniform float  shininess,
        	  uniform sampler1D colorLut,
        	  uniform float4x4 mvi)
{

	Kd = tex1D(colorLut, IN.texCoord).rgba;
	
	float3 n,halfV;
	float NdotL, NdotHV;
	
	/* The ambient term will always be present */
	float4 tColor = IN.ambient;
	
	/* a fragment shader can't write a varying variable, hence we need
	a new variable to store the normalized interpolated normal */
	n = normalize(IN.normal);
	
	/* compute the dot product between normal and ldir */
	NdotL = max(dot(n,IN.lightDir),0.0);
	if (NdotL > 0.0) {
			tColor += Kd * NdotL;
			halfV = normalize(IN.halfVector);
			NdotHV = max(dot(n,halfV),0.0);
			tColor += glstate.material.front.specular * 
					glstate.light[0].specular * 
					pow(NdotHV, glstate.material.front.shininess.x);
		}
	color = tColor;
	
/*
float nDotVP;
float nDotHV;
float pf;

float4x4 mv = glstate.matrix.modelview[0];
float4 lPos = mul(mv,glstate.light[0].position);
float4 halfL = mul(mv, glstate.light[0].half);

nDotVP = max(0.0, dot(IN.normal, normalize( (glstate.light[0].position).xyz)));
nDotHV = max(0.0, dot(IN.normal, (glstate.light[0].half).xyz));

if (nDotVP == 0.0)
	pf = 0.0;
else
	pf = pow(nDotHV, shininess);
	
color.xyz = Ke + (Ka*globalAmbient) + (Kd*lightColor*nDotVP) + (Ks*lightColor*pf);





*/
















/*






	Kd = tex1D(colorLut, IN.texCoord).rgb;
	float3 P = IN.position.xyz;
	float3 N = normalize(IN.normal);

  // transforming eyePosition and LightPosition into object-space
  //mvi = glstate.matrix.inverse.modelview[0];
  float4 temp = mul(mvi, lightPosition);
  float3 lPos = float3(temp.x, temp.y, temp.z);
  temp = mul(mvi, eyePosition);
  float3 ePos = float3(temp.x, temp.y, temp.z);

  // Compute emissive term
  float3 emissive = Ke;

  // Compute ambient term
  float3 ambient = Ka * globalAmbient;

  // Compute the diffuse term
  float3 L = normalize(lPos - P);
  float diffuseLight = max(dot(N, L), 0);
  float3 diffuse = Kd * lightColor * diffuseLight;

  // Compute the specular term
  float3 V = normalize(ePos - P);
  float3 H = normalize(L + V);
  float specularLight = pow(max(dot(N, H), 0), shininess);
  if (diffuseLight <= 0) specularLight = 0;
  float3 specular = Ks * lightColor * specularLight;

  color.xyz = emissive + ambient + diffuse + specular;

*/
//  color.rgb = Kd;

  // debug
  /*
  if (eyePosition.z==8.0f)
  	color.xyz = float3(0.0, 1.0, 0.0);
  else color.xyz = float3(1.0, 0.0, 0.0);
  */
}





/**
 * @file	ColorTable.h
 * @author  TheAvatar <weltmarktfuehrer@googlemail.com>
 * @version 1.0
 * @date	Created on: 03.02.2009
 *
 */

#ifndef COLORTABLE_H_
#define COLORTABLE_H_

#include <vector>
#include <map>

#include "GlToolkit.h"

#include <Cg/cg.h>
#include <Cg/cgGL.h>

#include <boost/system/config.hpp>
#include <boost/filesystem.hpp>
#include <boost/filesystem/fstream.hpp>

#include "V3ub.h"
#include "declarations.h"

namespace fs = boost::filesystem;
namespace ooctools {




/**
 * @class ColorTable
 *
 * @brief Management class dealing with everything about the color-table texture.
 *
 * Everything you need to do with the colortable-texture is done here.
 * From adding new colors, setting up openGL texture parameters to loading and saving to
 * and from a file.
 */
class ColorTable
{
	public:
		/**
		 * Default constructor
		 */
		ColorTable();

		/**
		 * Constructor
		 * @param data a byte pointer which is assumed to contain an unsigned int in the
		 * first sizeof(unsigned int) bytes stating the number of 3-tupel colors contained
		 * in the array.
		 */
		ColorTable(const char* data);

		/**
		 * All colors found in the param-file are thus added to this object.
		 * @param _filePath a filepath from boost which will (hopefully) point to a valid
		 * colortable.bin file.
		 */
		ColorTable(fs::path _filePath);
		/**
		 * Same as above but constructs the path from a std::string.
		 * @param _filePath
		 * @see ColorTable(const char* data)
		 */
		ColorTable(std::string _filePath);
		virtual ~ColorTable();
//		const float* getTextureData();

		/**
		 * sets texture parameters for current list of colors and uploads them to openGL.
		 * All colors added after this will not show up in openGL.
		 */
		void setupTexture();

		/**
		 * @return GLuint the ID for this texture generated by openGL.
		 */
		const GLuint getTextureId();

		/**
		 * Sets the shader wichich will use the texture.
		 * @param shader - the shader
		 */
		void setCgParams(const CGprogram shader);

		/**
		 * Adds a color to the internal list from wich the texture will be created and
		 * returns the index of it. If the color is already in the list nothing will be
		 * added and the index pointing to that color is returned instead.
		 * @param _color - the color
		 * @return index of the color - used for calculation of TextureCoordinate.
		 */
		unsigned int addColori(ooctools::V3ub* _color);

		/**
		 * @param _mat a material reference
		 * @return R
		 * @see addColori(ooctools::V3ub* _color), ooctools::Material
		 */
		unsigned int addColori(const Material& _mat);

		/**
		 * Same as addColori but returs the index as a float instead of an unsigned int
		 * @param _color
		 * @return index of given color as a float
		 * @see addColori(ooctools::V3ub* _color)
		 */
		float addColorf(ooctools::V3ub* _color);

		/**
		 * binds the texture to opengl-contex for usage.
		 */
		void bindTex();

		/**
		 * unbinds the texture from opengl-context.
		 */
		void unbindTex();

		/**
		 * returns number of colors in this object as an unsigned int.
		 */
		unsigned int getNColorsi(){return nColorsi;};

		/**
		 * returns number of colors in this object as a float.
		 */
		float getNColorsf(){return nColorsf;};

		float getQuotient(){return quotient;};
		float getHalfQuotient(){return halfQuotient;};
		float calculateTexCoord(unsigned int index);
		unsigned int calculateIndex(float texCoord);
		const ooctools::V3ub& getColor(unsigned int idx) const;
		void writeToFile(fs::path _filePath);
		static ColorTable* readFromFile(fs::path _filePath);
		void addByteStream(const unsigned char* _dataStream, unsigned int _nColors);
		void addFile(fs::path _filePath);
		const std::vector<ooctools::V3ub*>& getColorVector() const {return colors;};

		ColorTable& operator=(const ColorTable& _ct);
		bool operator==(const ColorTable& _ct);
		void clear();
		void debug() const;
		bool isInflated();

	private:
		// keeps track of colors.size() to quench the need of recalculation
		unsigned int nColorsi;
		// same as above, only in float
		float nColorsf;
		// this always 1.0 / nColors - for quicker access
		float quotient;
		// well....take a wild guess....
		float halfQuotient;
		// this is used to bind/unbind and upload the texture
		GLuint texId;
		// this holds the refernce to the shader which will actually access the texture.
		CGparameter cgTex;
		// center of this class - the data vault
		std::vector<ooctools::V3ub*> colors;

		std::vector<V3ub*>::iterator dummySpace;
		unsigned int dummyIndex;
		// ah, not elegant though - but it works.
		// this map holds a string-representation of a color and its index in the data vault.
		// i use this to "quickly" find out if the color is already in the vault,
		// and if that's the case, return its index
		std::map<std::string, unsigned int> dictionary;
		void toByteStream(unsigned char* _ref);
		void addNDummyColors(unsigned int n);
		void removePowerOfTwoOverhead();
		void inflateToPowerOfTwo();
};

} // ooctools

#endif /* COLORTABLE */



struct V2FI
{
  float2 texCoord	: TEXCOORD0;
  float3 tex3DCoord	: TEXCOORD1;
  float3 position 	: TEXCOORD2;
  float3 normal   	: TEXCOORD3;
  float3 color		: COLOR0;
};

struct Material{
	float3 Ka;
	float3 Kd;
	float3 Ks;
	float shininess;
};

struct Light{
	float3 position;
	float3 color;
};

float3 lighting(Material material,
				Light light,
				float3 globalAmbient,
				float3 P,
				float3 N,
				float3 eyePosition)
{
	// Compute ambient term
  	float3 ambient = material.Ka * globalAmbient;

  	// Compute the diffuse term
  	float3 L = normalize(light.position - P);
  	float diffuseLight = max(dot(N, L), 0);
  	float3 diffuse = material.Kd * light.color * diffuseLight;

  	// Compute the specular term
  	float3 V = normalize(eyePosition - P);
  	float3 H = normalize(L + V);
  	float specularLight = pow(max(dot(N, H), 0), material.shininess);
  	if (diffuseLight <= 0) specularLight = 0;
  	float3 specular = material.Ks * light.color * specularLight;

  	return ambient + diffuse + specular;
	
}
// main method of fragment shader
void main(V2FI IN,

	  out float4 color     : COLOR0,
	  		  uniform float3 Ka,
	  		  uniform float3 Kd,
	  		  uniform float3 Ks,
	  		  uniform float shininess,
	  		  uniform float useMap_Kd,	// 1.0 if a texture map is used as the Kd value; 0.0 else
	  
              uniform float3 globalAmbient,
              uniform float4 lightPosition,
        	  uniform float4x4 mvi,
        	  uniform float4x4 mvpi,
        	  uniform sampler2D map_Kd :	TEXUNIT0,	// The color texture
        	  uniform sampler3D map_noise :	TEXUNIT1,	// The noise texture
        	  uniform float lerpVal)
{

	float3 texColor;
	if (useMap_Kd>0){
		texColor = tex2D(map_Kd, IN.texCoord).rgb;
	}
	else {
		texColor = Kd;
	}
	
	float dissolve = tex3D(map_noise, IN.tex3DCoord).a;
	float4 tempColor;

	// -------------------------------------------
	// Noise Params
	// -------------------------------------------
	float tolerance = 0.05;
	float diff = abs(dissolve-lerpVal-tolerance);
	if (lerpVal+tolerance > dissolve && lerpVal-tolerance < dissolve){
		tempColor = float4(1.0f,0,0,0);
	}
	else if (lerpVal-tolerance > dissolve){
		//discard;
		//color = tex2D(tex2, texCoord.xy);
		tempColor = float4(texColor*float3(1.0f,0,0),0);
		float absDiff = diff*4.0;
		if (absDiff>= 1.0f){
			discard;
			//color = tex2D(tex2, texCoord.xy);
		}
		else {
			tempColor = lerp(float4(1.0f,0,0,1), float4(0.25f,0.0f,0.5f,1), absDiff);
			//color = lerp(float4(1.0f,0,0,1), tex2D(tex2, texCoord.xy), diff*4.0);
		}
	}
	else {
	//color = tex2D(rndTex, texCoord).aaaa;
	tempColor = float4(texColor,1);
	}

	// -------------------------------------------
	// Light Params
	// -------------------------------------------

	Material inMat;
	inMat.Ka = Ka;
	inMat.Kd = tempColor.xyz;
	inMat.Ks = Ks;
	inMat.shininess = shininess; 
	
	float3 P = IN.position.xyz;
	float3 N = normalize(IN.normal);

	Light l;
	l.color = float3(1.0,1.0,1.0);

  mvpi = glstate.matrix.inverse.mvp;
  
  // eyepos - hack to extract the eyeposition from the inverse modelview projection matrix
  float3 ePos = float3(mvpi[0].w, mvpi[1].w, mvpi[2].w);

  // lightPos [= eye pos]
  l.position = float3(mvpi[0].w, mvpi[1].w, mvpi[2].w);
  

  color = float4(lighting(inMat, l, float3(1.0, 0.0, 0.0), P, N, ePos),tempColor.a);

}




